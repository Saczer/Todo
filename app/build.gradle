apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "pl.olszak.michal.todo"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 24
        versionName "0.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError true
        enable 'UnusedResources'
        checkReleaseBuilds true
    }
}

ext {
    daggerVersion = '2.14.1'
    appCompatVersion = '26.1.0'
    constraintLayoutVersion = '1.0.2'
    rxJavaVersion = '2.1.8'
    rxAndroidVersion = '2.0.1'
    timberVersion = '4.6.0'
    lifecycleVersion = '1.1.0'
    roomVersion = '1.0.0'
    ktxVersion = '0.1'

    junitVersion = '4.12'
    runnerVersion = '1.0.1'
    espressoVersion = '3.0.1'
    assertjVersion = '3.9.0'
    mockitoKotlinVersion = '1.5.0'
    robolectricVersion = '3.6.1'
    threetenversion = '1.0.5'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support'
                && !requested.name.startsWith('multidex')) {
            details.useVersion(appCompatVersion)
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"
    implementation "com.android.support:design:$appCompatVersion"
    implementation "com.android.support:appcompat-v7:$appCompatVersion"
    implementation "com.android.support:recyclerview-v7:$appCompatVersion"
    implementation "android.arch.lifecycle:viewmodel:$lifecycleVersion"
    implementation "android.arch.lifecycle:extensions:$lifecycleVersion"
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"
    implementation "com.jakewharton.threetenabp:threetenabp:$threetenversion"
    implementation "androidx.core:core-ktx:$ktxVersion"

    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"

    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    kapt "com.android.databinding:compiler:$gradleVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    kapt "android.arch.lifecycle:compiler:$lifecycleVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "android.arch.persistence.room:testing:$roomVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    androidTestImplementation "com.android.support.test:runner:$runnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
}

class UpdateVersion extends DefaultTask {
    @Input
    String type

    @TaskAction
    void run() {
        File workingDir = project.rootProject.projectDir
        String latestTag = 'git describe --abbrev=0 --tags'.execute([], workingDir).text.trim() ?: "dev"
        if (latestTag == "dev") {
            throw new IllegalArgumentException("No tag found")
        }
        String[] latestVersion = latestTag.split("\\.")
        int major = latestVersion[0].toInteger()
        int minor = latestVersion[1].toInteger()
        int patch = latestVersion[2].toInteger()
        switch (type) {
            case "M":
                major++
                minor = 0
                patch = 0
                break
            case "m":
                minor++
                patch = 0
                break
            case "p":
                patch++
                break
            default:
                throw new IllegalArgumentException("Unrecognized version type \"$type\"")
        }

        String latestVersionString = "$major.$minor.$patch"
        println "Updating version to $latestVersionString"
        def outputStream = new ByteArrayOutputStream()

        project.root.exec {
            commandLine 'git', 'tag', '-a', latestVersionString, '-m', "\"Verison $latestVersionString.\""
            standardOutput = outputStream
            errorOutput = outputStream
        }

        String newTag = 'git describe --abbrev=0 --tags'.execute([], workingDir).text.trim() ?: "dev"
        if (newTag == latestTag) {
            throw new AssertionError("Git tag did not work ${outputStream.toString().trim()}")
        }
    }
}

tasks.create("updateVersion", UpdateVersion.class) {
    type getProperty("version")
    group "build"
    description "Updates current version, Supports CLI property flag -Pversion={type} whre type is (Mmp)"
}
